ktor {
  deployment {
    port = 8085
    port = ${?PORT}
  }
  application {
    modules = [no.nav.security.token.support.ktor.ApplicationKt.module]
  }
}

no.nav.security.jwt.client.registration {
  clients = [
    {
      client_name = "onbehalfof-client"
      token_endpoint_url = "http://localhost:1111/oauth2/token"
      grant_type = "urn:ietf:params:oauth:grant-type:jwt-bearer"
      scope = some-scope some-other-scope
      authentication = {
        client_id = some-random-id
        client_auth_method = private_key_jwt
        client_jwk = token-client-kotlin-demo/src/main/resources/jwk.json
      }
    },
    {
      client_name = "client_credentials-client"
      token_endpoint_url = "http://localhost:1111/oauth2/token"
      grant_type = "client_credentials"
      scope = some-scope some-other-scope
      authentication = {
        client_id = some-random-id
        client_auth_method = private_key_jwt
        client_jwk = token-client-kotlin-demo/src/main/resources/jwk.json
      }
    },
    {
      client_name = "tokenx-client"
      token_endpoint_url = "http://localhost:1111/oauth2/token"
      grant_type = "urn:ietf:params:oauth:grant-type:token-exchange"
      scope = some-scope some-other-scope
      authentication = {
        client_id = some-random-id
        client_auth_method = private_key_jwt
        client_jwk = token-client-kotlin-demo/src/main/resources/jwk.json
      }
    }

  ]
  cache = {
    enabled = true
    maximumSize = 1000
    evictSkew = 5
  }
}

no.nav.security.jwt {
  issuers = [
    {
      issuer_name = someshortname
      discoveryurl = "http://localhost:1111/default/.well-known/openid-configuration"
      accepted_audience = debugger
      cookie_name = localhost-idtoken
    }
  ]
}